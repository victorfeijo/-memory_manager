/*
 * File:   MemoryManager.h
 * Authors: INSERT YOUR NAME HERE
 * Strategy: INSERT THE MEMORY MANAGEMENT SCHEMA HERE (THE ALGORITHM YOU ARE IMPLEMENTING -- RANDOMLY GENERATED BY MOODLE AS A VARIATION)
 *
 * Created on ...
 */

#ifndef MEMORYMANAGER_H
#define	MEMORYMANAGER_H

#include "Process.h"
#include <queue>
#define NUMBER_PARTITIONS 4

class Partition {
public:  
    // INSERT YOUR CODE HERE
    // ...
    
    void addQueue(Process* process) {
        this->_processQueue.push(process);
    }
    
    Process* popQueue() {
        Process* process = this->_processQueue.front();
        this->_processQueue.pop();
        return process;
    }
    
    bool queueEmpty() {
        return this->_processQueue.empty();
    }
    
    //Constructor
    Partition(unsigned int begin, unsigned int end) {
        _beginAddress = begin;
        _endAddress = end;
        _hasProcess = false;
    }
    
    void setProcess(Process* process) {
        this->_process = process;
        if (!_hasProcess) {
            this->_hasProcess = true;
        }
    }
    
    Process* getProcess() {
        return this->_process;
    }
    
    bool hasProcess() {
        return this->_hasProcess;
    }
    
    void removeProcess() {
        this->_hasProcess = false;
    }
    
public:  // do not change
    unsigned int getBeginAddress() {
        return _beginAddress;
    }
    unsigned int getEndAddress() {
        return _endAddress;
    }
    unsigned int getLength() {
        return _endAddress - _beginAddress;
    }
private: // do not change
        unsigned int _beginAddress;
        unsigned int _endAddress;
private:
    // INSERT YOUR CODE HERE
    // ...
    std::queue<Process*> _processQueue;
    Process* _process;
    bool _hasProcess;
};


///////////////////////////////////////

class MemoryManager {
public: // do not change
    MemoryManager(unsigned int size);
    MemoryManager(const MemoryManager& orig);
    virtual ~MemoryManager();
public: // do not change
    void allocateMemoryForProcess(Process* process);
    void deallocateMemoryOfProcess(Process* process);
    void showAllocatedMemory();
    unsigned int getNumPartitions();
    Partition* getPartition(unsigned int index);
    unsigned int getSize() const;
private: // private attributes
    unsigned int _size;
    // INSERT YOUR CODE HERE
    // ...
    Partition* _partitions[NUMBER_PARTITIONS];
private: // private methods
    // INSERT YOUR CODE HERE
    // ...
    unsigned int getProcessSize(Process* process);
};

#endif	/* MEMORYMANAGER_H */


